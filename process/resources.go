// Code generated by go-bindata.
// sources:
// data/database/.env
// data/nfs/d4m-nfs-mounts.txt
// data/pxd.yml
// DO NOT EDIT!

package process

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDatabaseEnv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x8d\x0c\x0e\xf4\x89\x0f\xf2\xf7\x0f\x89\x0f\x70\x0c\x0e\x0e\xf7\x0f\x72\xb1\x2d\xca\xcf\x2f\xe1\x82\x48\xb8\x38\x86\x38\x3a\x39\x06\xbb\xda\x16\x67\x96\xa4\x02\x02\x00\x00\xff\xff\x62\x26\x0a\xd6\x2c\x00\x00\x00")

func dataDatabaseEnvBytes() ([]byte, error) {
	return bindataRead(
		_dataDatabaseEnv,
		"data/database/.env",
	)
}

func dataDatabaseEnv() (*asset, error) {
	bytes, err := dataDatabaseEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/database/.env", size: 44, mode: os.FileMode(420), modTime: time.Unix(1478098061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNfsD4mNfsMountsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x90\x41\x6b\x1b\x31\x10\x85\xef\xfa\x15\x03\x7b\x6d\x2c\xb7\xe0\x8b\x08\x81\xa4\x4b\x4b\x0e\x4b\x8d\xdd\x18\x42\x29\xcb\x58\x1a\xef\x2e\x95\x34\x62\x24\x39\xdd\x7f\x5f\x76\x93\xd0\xf6\x24\x7d\x4f\x4f\xbc\x79\xd3\xc0\x03\x41\xae\x42\x50\x46\x2c\x80\x71\x86\xc0\x35\x96\xfc\xca\x23\x5e\x09\xce\x44\x11\xd0\x39\x72\x30\x92\x90\x6a\xfe\x91\x85\x02\x5f\xc9\xc1\x45\x38\x40\xcb\xf6\x17\x09\x5c\x58\xa0\x43\x0b\x37\x77\xb0\x17\xba\x90\x50\xb4\x94\x17\xfc\x32\x79\x82\xe3\x88\x32\xc5\x41\x35\xa0\x1a\x78\xe6\x0a\xa1\xe6\x02\xb9\xa6\xe4\x67\x28\x23\xad\x7f\x33\x57\xb1\x04\x6e\x12\xb2\x85\x65\x06\x8c\x0e\x3a\x3e\xcf\x70\xea\xc0\x51\x2e\x53\xc4\x32\x71\xfc\xeb\xf8\xa0\x9a\xd5\xc4\x69\xd1\xd1\xfb\x79\x99\x19\x38\x42\xcd\x24\x7a\x10\xae\x09\x02\xa6\x34\xc5\xc1\xa8\x66\x69\x51\x4a\xca\x46\x6b\x47\x57\xf2\x9c\x48\x36\x98\x92\xa7\x8d\xe5\xa0\x3d\x0d\x68\x67\xed\xa7\xb3\xa0\xcc\xda\xb1\xad\x81\x62\x59\x33\x75\x8b\xf2\x32\x45\x7d\x78\xef\xa6\x3b\x8c\x7b\x1c\x28\xeb\x80\x71\xa7\xe9\x77\x62\x29\x79\xb3\xdb\x8c\x25\xf8\x35\xea\xb6\xbb\xff\xdc\x1f\x0f\x6d\xdf\x3e\x1e\xee\xcc\x6d\xf7\xed\xe1\xb9\x3f\x75\x7d\x7b\xfc\xbe\x2a\x3f\xcc\xf2\xfe\xf4\xd8\xf6\xdd\xfd\xfe\xe7\x2b\x7d\x7d\x23\xd5\x28\xbd\x71\xeb\x66\x6f\xd2\x8b\x35\xff\xc1\xd6\x6c\x95\x7e\xca\x24\xd9\xbc\x1d\xbb\xed\x47\xf3\x69\xab\xf4\x89\x7d\x0d\x94\xcd\xfb\x45\xfd\x09\x00\x00\xff\xff\xbe\xbf\x09\x7a\xea\x01\x00\x00")

func dataNfsD4mNfsMountsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataNfsD4mNfsMountsTxt,
		"data/nfs/d4m-nfs-mounts.txt",
	)
}

func dataNfsD4mNfsMountsTxt() (*asset, error) {
	bytes, err := dataNfsD4mNfsMountsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/nfs/d4m-nfs-mounts.txt", size: 490, mode: os.FileMode(420), modTime: time.Unix(1479110470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPxdYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x50\xcb\x8e\xdb\x30\x0c\xbc\xfb\x2b\x88\xcd\xb5\x89\x8b\xae\xd1\x83\xae\xed\xb1\xff\x10\xd0\x16\x13\x13\x2b\x8b\x29\x49\x3b\xd8\x7e\x7d\x21\x79\xed\x26\x45\x81\x5e\x08\x69\x66\xf8\x98\x59\x48\x8d\x25\x07\x78\xf9\xf2\xd2\x1c\xe0\x87\x0c\x98\xe0\x3b\x3a\xf6\x68\xd4\x1c\xe0\x9b\x64\x47\xce\xa4\xfc\x8b\x22\xf4\xb3\xc3\x6c\x9c\xaf\x80\x90\xaa\x34\xa2\x23\x5c\x24\x45\x52\xb8\x88\xc2\xad\xcc\x33\xa7\x3c\x50\x63\xa4\x0b\x0f\x64\xa1\x01\x98\x50\x19\x63\x5f\x9e\x00\x3c\xe1\x95\xc2\x8e\x25\x74\x32\xaf\xcc\xb0\xad\x3b\x67\x9c\xfe\x48\xce\x75\x59\x55\xdc\x44\xdd\xd6\x31\x00\x47\x78\x7d\xfd\xfc\x35\x94\x52\x11\xca\xcb\xf9\xc2\x89\x02\x9c\xda\xda\xda\x9e\x28\x2f\x95\x5a\x24\xcd\x13\xed\x9d\x87\xdd\xe4\xa3\x85\x9d\x5c\xcd\x8d\x1c\x23\x65\x88\xac\xc0\x19\x7c\x24\x98\x8d\x14\x54\xc4\x81\xad\x7c\x62\x35\xed\x23\xdb\x27\x30\x81\x48\xe6\x2a\xef\x25\xa0\xa2\xde\xdd\xc0\x5d\xb2\x43\xa4\x44\x4e\x95\x89\x7d\x5d\xbb\xdb\x68\x4f\x51\x86\x37\xd2\xe3\xed\x3e\x7c\x5c\x5e\xf8\xd0\x2e\xa8\x6d\xe2\xbe\x9d\xde\xed\xe7\x1a\x40\x26\xbf\x8b\xbe\x3d\x64\xd0\x2b\xc7\x2b\x35\x0d\x80\x51\xa2\xcc\xf3\xf4\x14\xf3\x06\xb6\xe6\x98\x23\x26\xc9\x74\x1c\x46\x95\x89\xfe\x19\xf9\x26\x7f\xd4\xfc\x15\x7a\xd7\x75\x5d\x28\xe5\x3f\x07\x3d\x33\x2b\xba\xa9\xa2\xf2\x42\x1a\x3e\xd0\xdf\x01\x00\x00\xff\xff\x4d\x0d\xf3\x23\x87\x02\x00\x00")

func dataPxdYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataPxdYml,
		"data/pxd.yml",
	)
}

func dataPxdYml() (*asset, error) {
	bytes, err := dataPxdYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/pxd.yml", size: 647, mode: os.FileMode(420), modTime: time.Unix(1484218143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/database/.env": dataDatabaseEnv,
	"data/nfs/d4m-nfs-mounts.txt": dataNfsD4mNfsMountsTxt,
	"data/pxd.yml": dataPxdYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"database": &bintree{nil, map[string]*bintree{
			".env": &bintree{dataDatabaseEnv, map[string]*bintree{}},
		}},
		"nfs": &bintree{nil, map[string]*bintree{
			"d4m-nfs-mounts.txt": &bintree{dataNfsD4mNfsMountsTxt, map[string]*bintree{}},
		}},
		"pxd.yml": &bintree{dataPxdYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

