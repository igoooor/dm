// Code generated by go-bindata.
// sources:
// assets/.DS_Store
// assets/database/.env
// assets/dm.yml
// assets/nfs/d4m-nfs-mounts.txt
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x4f\x6b\xdb\x30\x14\xc0\x9f\x1c\x6f\x93\xbd\x1c\x34\xb6\xb1\xc1\x2e\xbe\x0e\x72\xf0\xb6\x2c\x61\x37\xcf\xcb\x8e\x83\x40\x46\xc2\x58\x4a\x6a\x63\x97\x08\x8c\x1d\x62\xa7\xa6\x04\x43\xce\x3d\xf4\x43\xf4\xff\xe7\x28\xed\x87\xe8\x37\xe9\xb1\xa4\x7e\x69\x4d\x92\x1e\xdb\xa4\xe5\xfd\x40\xfc\x64\xd9\xb2\x2d\x09\xe4\xf7\x0c\x00\xcc\x1e\x79\x5f\x00\x04\x00\x70\xc8\xad\x68\xb0\x14\x8e\x65\x01\x05\xcd\xf2\x22\x20\x1e\xb8\x41\xe4\x02\xc0\x95\x3b\x58\x7e\x2f\x62\xcd\x98\xae\x5d\x09\x42\xd8\x82\xd8\x4d\x8b\xeb\x17\xc8\x38\x31\xcd\x4b\xa6\x94\xd4\x17\x2f\x5f\x71\x4d\xd7\xcb\x7a\x59\x17\x6f\xca\x1b\xad\x7e\x94\xb6\x12\x27\x19\xc5\xb6\x33\xfc\x7f\x73\x24\x3d\xdf\xc5\x7a\xd3\x49\xfa\xb3\xfa\xdf\x28\x0a\x6e\xeb\x8e\xdb\x96\x7e\xda\x13\xef\x7e\x45\x61\xe2\xc8\xd0\x1f\x16\xba\x76\x3b\x32\xf4\xa2\xd4\x8e\x46\xa1\x17\x77\xb1\xb1\x23\xbd\xa4\xdf\x13\xef\x9b\x43\x7f\x5b\xfa\x69\xd3\x09\xfd\xb6\x8c\xa5\x2b\x03\x99\xec\x68\x1a\xd7\xb8\xd6\x13\x1f\xc6\xe3\xaf\x66\xad\x62\xfc\xa8\x66\x15\x63\x5c\xaf\x9b\x15\xa3\xfa\xad\x96\x65\x62\x8f\xf3\x4f\x9f\xbf\xff\xfc\xf3\x6f\x90\xed\xee\x1f\x1c\x1e\x1d\x9f\x9c\x9e\x9d\xe3\xa0\x19\x8e\xfe\xed\xdc\x6c\x5c\x3c\xf6\xf4\x13\x04\x41\xac\x04\xdc\x05\xf9\xeb\x55\xbf\x08\x41\x10\x6b\xc7\x74\x7f\x30\xd0\x16\x7a\x92\x9b\xe1\x79\x05\xad\x16\xfa\x08\xb4\x81\xb6\xd0\x93\xdc\x0c\xaf\x53\xd0\x2a\x9a\xa3\x05\xda\x40\x5b\xe8\x49\x6e\xdc\xb4\x18\x26\x1f\x0c\x9f\xcc\x30\x43\x61\x02\x6d\xa0\xad\x87\x99\x1b\x82\x78\xea\x94\x72\x89\xe9\xf7\xff\xf7\xfd\xf9\x3f\x41\x10\xcf\x18\xa6\x36\x5a\x0d\xfb\x2e\x21\x58\x40\xc1\x40\x60\x73\xd6\x61\x2e\x10\x80\x42\x10\xa0\xe4\x3f\x0b\x3f\x16\xda\x29\x10\x20\x88\x35\xe3\x3a\x00\x00\xff\xff\x7a\xfb\x70\x77\x04\x18\x00\x00")

func assetsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsDs_store,
		"assets/.DS_Store",
	)
}

func assetsDs_store() (*asset, error) {
	bytes, err := assetsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1479109671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDatabaseEnv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\x8d\x0c\x0e\xf4\x89\x0f\xf2\xf7\x0f\x89\x0f\x70\x0c\x0e\x0e\xf7\x0f\x72\xb1\x2d\xca\xcf\x2f\xe1\x82\x48\xb8\x38\x86\x38\x3a\x39\x06\xbb\xda\xa6\xa4\xa6\x25\x96\xe6\x94\x00\x02\x00\x00\xff\xff\x0b\xa6\xfa\x1b\x2f\x00\x00\x00")

func assetsDatabaseEnvBytes() ([]byte, error) {
	return bindataRead(
		_assetsDatabaseEnv,
		"assets/database/.env",
	)
}

func assetsDatabaseEnv() (*asset, error) {
	bytes, err := assetsDatabaseEnvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/database/.env", size: 47, mode: os.FileMode(420), modTime: time.Unix(1487890315, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDmYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\x41\x8f\xd3\x40\x0c\x85\xef\xf9\x15\xd6\xf6\x4a\x9b\x8a\xad\xd0\x6a\x24\x0e\x08\x0e\x20\xad\x84\x04\x0b\xd7\x6a\x92\x71\x5b\xd3\x89\x5d\x3c\x4e\xba\xe5\xd7\xa3\x99\x6e\xb2\xad\x54\x71\xe2\x32\x6a\xdf\x7b\x33\xf6\x67\x67\x40\x4d\x24\xec\xe0\xee\xed\x5d\x35\x83\x47\x69\x7d\x84\x4f\xde\x7c\xe3\x13\x56\x33\xf8\x28\x6c\x9e\x18\x95\xfe\x60\x80\xa6\x37\xe8\x13\xf1\x16\x3c\xc4\x12\x0d\xde\x3c\x6c\x24\x06\x54\xd8\x88\xc2\x21\xbf\x97\x0c\xb9\xc5\x2a\xa1\x0e\xd4\x62\x72\x15\x40\xe7\x95\x7c\x68\xf2\x4f\x00\xea\xfc\x16\xdd\xa4\x45\x6f\x98\xac\x38\xed\x58\x6e\xcd\xbe\x7b\x8d\xac\x4b\xb1\x92\x38\x88\x5a\x3a\x3f\x03\x30\x87\xfb\xfb\xe5\x3b\x97\x8f\xa2\x20\x0f\xeb\x0d\x45\x74\xb0\xa8\xcb\xd5\x7a\x81\x3c\x14\x6b\x90\xd8\x77\x38\xdd\x9c\x4d\x90\x97\x08\x93\x79\x86\xdb\x51\x08\xc8\x10\x48\x81\x18\x6c\x87\xd0\x27\x54\x50\x11\x03\x4a\xf9\x4f\x28\xd0\xb6\xa3\xf4\x06\x92\x40\xc0\x64\x2a\xa7\x3c\xa0\x9c\x9e\x68\xe0\x28\x6c\x10\x30\xa2\x61\x71\x42\x53\xca\x4e\x18\x63\xbb\x59\x74\xf5\xe0\xb5\x8e\xd4\xd4\xdd\x29\xfd\x3e\x53\x33\xda\x51\x74\x7f\x01\xde\x28\x85\x2d\x8e\xd4\xa4\xc2\x1d\xb2\xbd\xfa\x3f\xbf\x7c\x7b\xfa\xf1\xe1\x71\xfd\xf9\xeb\xf7\xa7\xf7\x2f\x63\x5c\x04\x1c\xaa\x0a\x20\x61\x44\xa6\xbe\xbb\xda\xc6\x28\xd6\xc9\x3c\x07\x1f\x85\x71\xde\xee\x54\x3a\xbc\xb9\x99\x31\x7e\x6b\x29\xab\xd5\x6a\xe5\xf2\xf1\x3f\x7a\x1f\x0b\x8d\xcd\x1f\x54\x9e\x4f\x57\x9d\xff\x3a\x52\x5e\x5e\xcd\x5b\xe2\xe7\x79\xf1\x6f\x75\xf5\xb0\x74\x0f\xcb\x5b\xdf\xc2\x1c\xca\xc4\xb5\xe7\x3a\x48\xbb\x47\x5d\x24\x69\xf7\xae\xb6\xee\x70\x25\xa8\xfc\x9b\xa7\xba\x76\xce\xea\x98\x0a\x4a\x03\xaa\x7b\x51\xff\x06\x00\x00\xff\xff\xbb\x66\x74\x60\x77\x03\x00\x00")

func assetsDmYmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDmYml,
		"assets/dm.yml",
	)
}

func assetsDmYml() (*asset, error) {
	bytes, err := assetsDmYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dm.yml", size: 887, mode: os.FileMode(420), modTime: time.Unix(1487986549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsNfsD4mNfsMountsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\x41\x6b\xdc\x30\x10\x85\xef\xfa\x15\x03\xbe\xb6\xd6\x29\x17\x13\x02\x49\x4d\x4b\x0e\xa2\xcb\x6e\xbb\x10\x4a\x31\xb3\xd2\xac\x2d\x2a\x69\xc4\x48\xda\xd6\xff\xbe\xd8\x69\x68\x6e\xf3\xbd\x79\xc3\x9b\xd7\xc1\x13\x41\x69\x42\x50\x17\xac\x80\x69\x85\xc8\x2d\xd5\xf2\xca\x0b\xde\x08\x2e\x44\x09\xd0\x39\x72\xb0\x90\x90\xea\xde\xc9\x42\x91\x6f\xe4\xe0\x2a\x1c\x61\x64\xfb\x8b\x04\xae\x2c\x60\xd0\xc2\xc7\x07\x38\x08\x5d\x49\x28\x59\x2a\x1b\x7e\xf6\x81\xe0\xb4\xa0\xf8\x34\xab\x0e\x54\x07\x2f\xdc\x20\xb6\x52\xa1\xb4\x9c\xc3\x0a\x75\xa1\xfd\xb6\x70\x13\x4b\xe0\xbc\x90\xad\x2c\x2b\x60\x72\x60\xf8\xb2\xc2\xd9\x80\xa3\x52\x7d\xc2\xea\x39\xfd\x77\x7c\x50\xdd\x6e\xe2\xbc\xe9\x18\xc2\xba\xfd\x0c\x9c\xa0\x15\x12\x3d\x0b\xb7\x0c\x11\x73\xf6\x69\x1e\x54\xb7\xb5\xa8\x35\x97\x41\x6b\x47\x37\x0a\x9c\x49\x7a\xcc\x39\x50\x6f\x39\xea\x40\x33\xda\x55\x07\x7f\x11\x94\x55\x3b\xb6\x2d\x52\xaa\x7b\xa6\x1e\x51\x7e\xfb\xa4\x8f\x6f\xdd\xb4\xc1\x74\xc0\x99\x8a\x8e\x98\xee\x34\xfd\xc9\x2c\xb5\xf4\x77\xfd\x52\x63\xd8\xa3\xee\xcd\xe3\xa7\xe9\x74\x1c\xa7\xf1\xf9\xf8\x30\xdc\x9b\xaf\x4f\x2f\xd3\xd9\x4c\xe3\xe9\xdb\xae\xfc\x18\xb6\xfd\xf7\xe7\x71\x32\x8f\x87\x9f\xaf\xf4\xe5\x1f\xa9\x4e\xe9\x33\x87\x16\xa9\x0c\x6f\x83\xfa\x1b\x00\x00\xff\xff\x97\x2c\x59\x2f\xb7\x01\x00\x00")

func assetsNfsD4mNfsMountsTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsNfsD4mNfsMountsTxt,
		"assets/nfs/d4m-nfs-mounts.txt",
	)
}

func assetsNfsD4mNfsMountsTxt() (*asset, error) {
	bytes, err := assetsNfsD4mNfsMountsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/nfs/d4m-nfs-mounts.txt", size: 439, mode: os.FileMode(420), modTime: time.Unix(1487932621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.DS_Store":              assetsDs_store,
	"assets/database/.env":          assetsDatabaseEnv,
	"assets/dm.yml":                 assetsDmYml,
	"assets/nfs/d4m-nfs-mounts.txt": assetsNfsD4mNfsMountsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{assetsDs_store, map[string]*bintree{}},
		"database": &bintree{nil, map[string]*bintree{
			".env": &bintree{assetsDatabaseEnv, map[string]*bintree{}},
		}},
		"dm.yml": &bintree{assetsDmYml, map[string]*bintree{}},
		"nfs": &bintree{nil, map[string]*bintree{
			"d4m-nfs-mounts.txt": &bintree{assetsNfsD4mNfsMountsTxt, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
